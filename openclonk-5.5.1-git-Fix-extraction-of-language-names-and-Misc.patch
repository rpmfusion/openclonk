From 840b9cd30a437054cb584547d08c9d98b307385f Mon Sep 17 00:00:00 2001
From: Sven Eberhardt <sven2@goldwipf.de>
Date: Sun, 5 Oct 2014 18:10:23 +0200
Subject: [PATCH 1/3] Fix off-by-one error in text line break code (#1122)

---
 src/graphics/C4FontLoader.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/graphics/C4FontLoader.cpp b/src/graphics/C4FontLoader.cpp
index a13c6d6..da3d4e7 100644
--- a/src/graphics/C4FontLoader.cpp
+++ b/src/graphics/C4FontLoader.cpp
@@ -760,6 +760,7 @@ int CStdFont::BreakMessage(const char *szMsg, int iWdt, StdStrBuf *pOut, bool fC
 	       iXBreak=0, // text width as it was at last break pos
 	               iXEmergencyBreak = 0, // same, but at last char in case no suitable linebreak could be found
 	                                  iHgt=iLineHgt; // total height of output text
+	int iCharHOverlap = Max<int>(-iHSpace, 0); // character width exceeding placement of next character
 	bool fIsFirstLineChar = true;
 	// ignore any markup
 	C4Markup MarkupChecker(false);
@@ -802,7 +803,7 @@ int CStdFont::BreakMessage(const char *szMsg, int iWdt, StdStrBuf *pOut, bool fC
 			// add chars to output
 			pOut->Append(szLastPos, szPos - szLastPos);
 			// add to line; always add one char at minimum
-			if ((iX+=iCharWdt) <= iWdt || fIsFirstLineChar)
+			if ((iX+=iCharWdt)+iCharHOverlap <= iWdt || fIsFirstLineChar)
 			{
 				// check whether linebreak possibility shall be marked here
 				// 2do: What about unicode-spaces?

From 67c0deae38c6b6552b539dbd51c7a24c80c1989e Mon Sep 17 00:00:00 2001
From: Nicolas Hake <isilkor@openclonk.org>
Date: Mon, 6 Oct 2014 16:03:11 +0200
Subject: [PATCH 2/3] Remove leading + from IDS_MSG_AUTOFRAMESKIP DE
 translation (Github #2)

---
 planet/System.ocg/LanguageDE.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/planet/System.ocg/LanguageDE.txt b/planet/System.ocg/LanguageDE.txt
index f09c29c..eea90d6 100644
--- a/planet/System.ocg/LanguageDE.txt
+++ b/planet/System.ocg/LanguageDE.txt
@@ -486,7 +486,7 @@ IDS_MNU_VIEWPORT=Sichtfenster
 IDS_MSG_ALLOWSYOUTOJOINADIFFERENT=Erlaubt die Auswahl eines anderen Teams.
 IDS_MSG_ANTIALIASING_DESC=FSAA (MultiSampling)-Level einstellen
 IDS_MSG_ANUPDATETOVERSIONISAVAILA=Ein neues Update ist verfügbar. Soll das Update heruntergeladen und installiert werden?
-+IDS_MSG_AUTOFRAMESKIP=Automatischer Frameskip
+IDS_MSG_AUTOFRAMESKIP=Automatischer Frameskip
 IDS_MSG_AUTOWINDOWED=Automagisch
 IDS_MSG_BACKTOPLAYERDLG=Zurück zur Spielerauswahl.
 IDS_MSG_CANNOTSTARTSCENARIO=Start nicht möglich.

From a03ec84374d8cfc4dc1c763700763f1e2312cd60 Mon Sep 17 00:00:00 2001
From: Armin Burgmeier <armin@arbur.net>
Date: Mon, 6 Oct 2014 13:03:32 -0400
Subject: [PATCH 3/3] Fix extraction of language names for language options
 (#1127)

At least in some implementations, std::regex does not treat $ and ^ as the
beginning or end of a line but as the beginning or end of the whole string.
---
 src/c4group/C4Language.cpp | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/c4group/C4Language.cpp b/src/c4group/C4Language.cpp
index 71dba1b..28b8b2e 100644
--- a/src/c4group/C4Language.cpp
+++ b/src/c4group/C4Language.cpp
@@ -389,7 +389,12 @@ namespace
 {
 	std::string GetResStr(const char *id, const char *stringtbl)
 	{
-		static re::regex line_pattern("^([^=]+)=(.*?)\r?$", static_cast<re::regex::flag_type>(re::regex_constants::optimize | re::regex_constants::ECMAScript));
+		// The C++11 standard does not specify whether $ and ^ match
+		// the beginning or end of a line, respectively, and it seems
+		// like in some implementations they only match the beginning
+		// or end of the whole string. See also #1127.
+		static re::regex line_pattern("(?:\n|^)([^=]+)=(.*?)\r?(?=\n|$)", static_cast<re::regex::flag_type>(re::regex_constants::optimize | re::regex_constants::ECMAScript));
+
 		assert(stringtbl);
 		if (!stringtbl)
 		{
